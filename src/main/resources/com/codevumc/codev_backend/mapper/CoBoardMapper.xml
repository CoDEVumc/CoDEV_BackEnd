<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.codevumc.codev_backend.mapper.CoBoardMapper">

    <select id="searchBoard" parameterType="hashMap" resultType="CoBoard">
        select type, count(co_targetId) as boardCount
        from (
            select j1.type, co_targetId
            from (
                select type
                from (
                    select co_qnaId as co_targetId, co_title, content, createdAt, '질문' as type
                    from CoQnaBoard as coqb
                    union all
                    select co_infoId as co_targetId, co_title, content, createdAt, '정보' as type
                    from CoInfoBoard as coib
                    ) temp group by type
                ) j1
        left join (
                select co_targetId, co_title, content, createdAt, type
                from (
                    select co_qnaId as co_targetId, co_title, content, createdAt, '질문' as type
                    from CoQnaBoard as coqb
                    union all
                    select co_infoId as co_targetId, co_title, content, createdAt, '정보' as type
                    from CoInfoBoard as coib
                    ) uniondata
                <if test="searchTag != null and !searchTag.equals('')">
                    where content like #{searchTag} or co_title like #{searchTag}
                </if>
                ) j2 on j1.type = j2.type
        ) jj
        group by type
    </select>

    <select id="searchListQnaBoard" parameterType="hashMap" resultType="CoQnaBoard">
        select distinct
            cqb.co_qnaId as 'co_qnaId',
            cqb.co_email as 'co_email',
            cu.co_nickName as 'co_nickname',
            cu.profileImg as 'profileImg',
            cqb.co_title as 'co_title',
            substr(cqb.content, 1, 40) as 'content',
            cqb.co_mainImg as 'co_mainImg',
            (select count(*) from CoLikeOfQnaBoard cloqb where cloqb.co_qnaId = cqb.co_qnaId) as 'co_likeCount',
            (select
                     (select count(*) from CoCommentOfQnaBoard ccoqb2 where ccoqb2.co_qnaId = cqb.co_qnaId) +
                     (select count(*) from CoReCommentOfQnaBoard crcoqb where crcoqb.co_coqb = ccoqb.co_coqb)) as 'co_commentCount',
            (select count(*) from CoMarkOfQnaBoard cmoqb where cmoqb.co_qnaId = cqb.co_qnaId) as 'co_markCount',
            cqb.createdAt as 'createdAt',
            cqb.updatedAt as 'updatedAt'
        from CoQnaBoard cqb
                 left join CoUser cu on cqb.co_email = cu.co_email
                 left join CoCommentOfQnaBoard ccoqb on cqb.co_qnaId = ccoqb.co_qnaId
        where cqb.createdAt is not null

        <if test="coMyBoard != null and !coMyBoard.equals('')">
            and cqb.co_email = #{coMyBoard}
        </if>

        <if test="searchTag != null and !searchTag.equals('')">
            and cqb.content like #{searchTag} or cqb.co_title like #{searchTag}
        </if>

        order by
        <choose>
            <when test='sortingTag.equals("POPULARITY")'>
                co_likeCount desc limit
            </when>
            <otherwise>
                createdAt desc limit
            </otherwise>
        </choose>
         #{limit} offset #{offset}
    </select>

    <select id="searchListInfoBoard" parameterType="hashMap" resultType="CoInfoBoard">
        select distinct
            cib.co_infoId as 'co_infoId',
            cib.co_email as 'co_email',
            cu.co_nickName as 'co_nickname',
            cu.profileImg as 'profileImg',
            cib.co_title as 'co_title',
            substr(cib.content, 1, 40) as 'content',
            cib.co_mainImg as 'co_mainImg',
            (select count(*) from CoLikeOfInfoBoard cloib where cloib.co_infoId = cib.co_infoId) as 'co_likeCount',
            (select
                    (select count(*) from CoCommentOfInfoBoard ccoib2 where ccoib2.co_infoId = cib.co_infoId) +
                    (select count(*) from CoReCommentOfInfoBoard crcoib where crcoib.co_coib = ccoib.co_coib)) as 'co_commentCount',
            (select count(*) from CoMarkOfInfoBoard cmoib where cmoib.co_infoId = cib.co_infoId) as 'co_markCount',
            cib.createdAt as 'createdAt',
            cib.updatedAt as 'updatedAt'
        from CoInfoBoard cib
        left join CoUser cu on cib.co_email = cu.co_email
        left join CoCommentOfInfoBoard ccoib on cib.co_infoId = ccoib.co_infoId
        where cib.createdAt is not null
        <if test="coMyBoard != null and !coMyBoard.equals('')">
            and cib.co_email = #{coMyBoard}
        </if>

        <if test="searchTag != null and !searchTag.equals('')">
            and cib.content like #{searchTag} or cib.co_title like #{searchTag}
        </if>
        order by
        <choose>
            <when test='co_sortingTag.equals("POPULARITY")'>
                co_likeCount desc limit
            </when>
            <otherwise>
                createdAt desc limit
            </otherwise>
        </choose>
        #{limit} offset #{offset}
    </select>

</mapper>